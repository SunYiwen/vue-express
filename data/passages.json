{"_id":{"$oid":"5e5bbfbc46b229237bc1a790"},"published":true,"read_Time":1,"title":"AJAX","content":"## 1. 什么是AJAX?\n\nAJAX: Asynchronous Javascript +XML ,也就是异步的JS和XML.\n\n ### 1.1 异步和同步\n\n异步：当我们像服务器发送一个请求的时候，**不需要**得到服务器的响应就可以继续地去执行其他的脚本。\n\n同步：当我们向服务器发送请求的之后，只有等到服务器有了响应之后，我们才可以去执行其他的脚本。\n\n\n\n## 2. AJAX的使用\n```js\nlet xhr =new XMLHttpRequest()\nxhr.open('get','test.json',true)\nxhr.onload = function () {\n  console.log(xhr.responseText)\n}\nxhr.send(null)\n```\n\n### 2.1 ajax的三个参数\n\n`xhr.open(method:'' ,url:'',async:'')`\n\nmetnod：请求的方法\n\nurl：请求的路径\n\nasync：是否采用异步的方法，异步：true，同步：false\n\n### 2.2 xhr.send()和xhr.open()\n\n`open()`方法不会真正的发送请求，而是启动一个请求准备发送。\n`send()`方法接受一个参数，作为请求主体发送的数据。若没有数据必须传入**null**。\n\n\n\n\n## 3.ajax的参数\n\n - responseText：响应主体被返回的文本\n - responseXML：如果`content-type`为\"text/html\"或者\"application/html\"，这个属性中保存包含着响应数据的XML DOM文档\n - status：响应的HTTP状态\n  \u0009+ 200：成功\n  \u0009+ 304：请求资源未被修改，可以直接使用浏览器中的缓存\n - statusText：HTTP状态的说明\n - readyState：请求响应过程中的当前活动阶段\n      + 0：未初始化。尚未调用open()方法。\n      + 1：启动。已经调用open()方法，但尚未调用send()方法。\n      + 2：发送。已经调用send()方法，但尚未接受到响应。\n      + 3：接受。已经接受到部分数据响应。\n      + 4：完成。已经接收到全部的响应数据，而且已经可以在客户端使用了。\n- abort：取消异步请求\n\n\n\n## 4.简单封装后的ajax对象\n\n```js\n      function get(url,callback){\n        let xhr = new XMLHttpRequest()\n        xhr.onload = function () {\n          callback(xhr.responseText)\n        }\n        xhr.open('get','test.json',true)\n        xhr.send()\n      }\n      \n      get('test.json',function (data) {\n        console.log(data)\n      })\n```\n\n## 5.HTTP头部信息\n\n发送xhr请求的时候，还会发送下列头部信息。\n\n- Accept\n- Accept-Charset\n- Accept-Encoding\n- Accept-Language\n- Connection\n- Cookie\n- Host\n- Referer\n\n`setRequestHeader(name,value)`自定义请求头部信息,必须在open()之后，send()之前。\n\n`getResponseHeader(name)`获得相应响应头部的信息。\n\n`getAllResponseHeaders()`获得多行文本内容。\n\n","description":"AJAX: Asynchronous Javascript +XML ,也就是异步的JS和XML.","create_time":{"$date":"2020-03-01T13:59:24.366Z"},"id":1,"type_id":2,"tag_id":3,"__v":0}
{"_id":{"$oid":"5e5bc00a46b229237bc1a791"},"published":true,"read_Time":1,"title":"利用art-template动态渲染文本","content":"## 1. 在html中使用模板引擎进行遍历渲染\n\n```html\n{{each files}}\n \u003ctr\u003e\n     \u003cth scope=\"row\"\u003e{{ $index }}\u003c/th\u003e\n \u0009 \u003ctd\u003e{{ $value }}\u003c/td\u003e\n \u003c/tr\u003e\n {{/each}}\n```\n\nfiles:遍历的对象\n\n$index:遍历的序号，从0开始\n\n$value:遍历的内容\n\n## 2. 在服务器端使用模板引擎\n\n```js\nvar template=require('art-template')//引入模板引擎\nvar data=template.render(data.toString(),{\n    files:files\n})\nresponse.end(data)\n```\n\n","description":"1. 在html中使用模板引擎进行遍历渲染","create_time":{"$date":"2020-03-01T14:00:42.241Z"},"id":2,"type_id":1,"tag_id":2,"__v":0}
